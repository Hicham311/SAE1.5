import markdown
import csv
import requests
from bs4 import BeautifulSoup

# Fonction pour analyser le contenu d'un fichier texte

def analyze_text_file(file_path):
    try:
        # Lire le fichier texte
        with open(file_path, 'r', encoding='utf-8') as file:
            text_content = file.read()

        # Ajoutez ici la logique pour analyser le contenu du fichier texte
        # Exemple : results = your_custom_function(text_content)
        results = [line for line in text_content.split('\n') if line]  # Exemple basique

        return results

    except Exception as e:
        print(f"Erreur lors de l'analyse du fichier : {e}")
        return None

# Fonction pour générer une page Markdown à partir des résultats
def generate_markdown(results):
    try:
        # Générer la page Markdown
        markdown_content = "# Résultats de l'Analyse\n\n"
        for result in results:
            markdown_content += f"- {result}\n"

        # Enregistrer la page Markdown dans un fichier
        with open('results.md', 'w', encoding='utf-8') as markdown_file:
            markdown_file.write(markdown_content)

        print("Page Markdown générée avec succès : results.md")
        return True
    except Exception as e:
        print(f"Erreur lors de la génération de la page Markdown : {e}")
        return False

# Fonction pour générer un fichier CSV à partir des résultats
def generate_csv(results):
    try:
        # Générer le fichier CSV
        csv_header = ["Résultat"]
        csv_rows = [[result] for result in results]

        with open('results.csv', 'w', newline='', encoding='utf-8') as csv_file:
            csv_writer = csv.writer(csv_file)
            csv_writer.writerow(csv_header)
            csv_writer.writerows(csv_rows)

        print("Fichier CSV généré avec succès : results.csv")
        return True
    except Exception as e:
        print(f"Erreur lors de la génération du fichier CSV : {e}")
        return False

# Point d'entrée du programme
if __name__ == "__main__":
    # Emplacement du fichier texte déjà téléchargé localement
    local_file_path = "votre_fichier_texte.txt"

    # Analyser le fichier texte
    results = analyze_text_file(local_file_path)

    if results:
        # Afficher les résultats dans la console
        for result in results:
            print(result)

        # Générer la page Markdown
        generate_markdown(results)

        # Générer le fichier CSV
        generate_csv(results)
    else:
        print("Aucun résultat à afficher.")


Steps for use
Download the text file:

Ensure that the text file generated by TCPDump is downloaded locally and accessible on your system.
Running the script:

Open a terminal in the directory containing the tcpdump_analyzer.py script.
Execute the script using the following command:

python tcpdump_analyzer.py

Results analysis:

The script will analyze the text file, display the results in the console, generate a Markdown page (results.md) and a CSV file (results.csv).
Viewing in Excel :

Open the CSV file (results.csv) with a spreadsheet program such as Excel for further analysis.

Explore data, use filters, create graphs and customize the spreadsheet to your needs.

Tips & Tricks
Customization: You can adapt the script by adding custom features to meet specific data analysis needs.

Optimization: For large text files, make sure you have sufficient system resources for optimal execution.
Save results

All generated results, including the Markdown page and CSV file, are saved in the same directory as the script.



Excel notice:

Open the CSV file (results.csv) with Microsoft Excel.
Explore the data:

Use filters to sort and filter information.
Create graphs to visualize trends.
Apply formulas for statistical analysis.
Compare with the Markdown Page:

Consult the Markdown Page for additional information on the results.
Document your Observations:

Take detailed notes on observations and trends identified.
